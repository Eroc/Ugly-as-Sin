class UaS_Jamming_Bootstrap : EventHandler {
	override void WorldTick() {
		if (!UaS_JammingEnabled) { return; }
		for (int i = 0; i < MAXPLAYERS; i++) {
			if (!playeringame[i]) { continue; }
			PlayerInfo p = players[i];
			if (!p.mo) { continue; }
			if (!p.mo.countinv("UaS_WeaponJammer")) {
				p.mo.Giveinventory("UaS_WeaponJammer", 1);
			}
		}
	}
}

class UaS_WeaponJammer : Inventory {
	int ChamberSlot, MagSlot, HeatSlot, JamSlot, FlagSlot;
	int OldChamber, OldMag, OldFlags;
	int JamCheck;
	int JamThresh;
	int DirtAmount;
	int CleanCycle;
	int WJ_LIVE, WJ_SHELL, WJ_EMPTY;
	bool JustFired, JustFed, JustEjected;
	HDWeapon wep;

	void DirtifyWeapons() {
		// Dirtify weapons by default
		if (wep.weaponstatus[JamSlot] != 0) { return; }

		if (UaS.RandomChance(UaS_JammingStartDirty)) {
			wep.weaponstatus[JamSlot] = weightedroll(int(JamThresh*UaS_JammingStartDirty));
			UaS.LogDebug(DBG_Jamming, string.format("Dirtified "
				..wep.GetClassName().." "
				..wep.weaponstatus[JamSlot].."/"
				..JamThresh));
		}
		else {
			wep.weaponstatus[JamSlot] = 1;
			UaS.LogDebug(DBG_Jamming, string.format("Start clean "
				..wep.GetClassName()));
		}
	}

	override void DoEffect() {
		if (!owner.player.ReadyWeapon) { return; }
		if (level.maptime < 35) { return; }
		wep = null;
		if (owner.player.ReadyWeapon is 'LiberatorRifle') { LiberatorJamming(); }
		if (owner.player.ReadyWeapon is 'HDPistol') { PistolJamming(); }
		if (owner.player.ReadyWeapon is 'HDSMG') { SMGJamming(); }
		if (!wep) { return; }

		DirtifyWeapons();

		// Reroll the jam chance every shot and track shots fired
		JamCheck = weightedroll(JamThresh);
		if (JustFired) {
			wep.weaponstatus[JamSlot] += DirtAmount;
			UaS.LogDebug(DBG_Jamming, string.format("Jam threshold "..wep.weaponstatus[JamSlot].."/"..JamThresh.." check "..JamCheck));
		}

		// Check for failure thresholds
		if (JustFed && JamCheck < wep.weaponstatus[JamSlot]) {
			UaS.LogDebug(DBG_Jamming, string.format("Jam threshold "..wep.weaponstatus[JamSlot].."/"..JamThresh.." check "..JamCheck.." -- Failure to feed"));
			wep.weaponstatus[ChamberSlot] = WJ_EMPTY;
			wep.weaponstatus[MagSlot]++;
			return;
		}
		else if (JustFed && JamCheck == JamThresh) {
			UaS.LogDebug(DBG_Jamming, string.format("Jam threshold "..wep.weaponstatus[JamSlot].."/"..JamThresh.." check "..JamCheck.." -- Next round bad"));
			wep.weaponstatus[ChamberSlot] = WJ_SHELL;
			return;
		}

		CheckCleaning();

		// Set old variables
		OldChamber = wep.weaponstatus[ChamberSlot];
		OldMag = wep.weaponstatus[MagSlot];
		OldFlags = wep.weaponstatus[FlagSlot];
	}

	void CheckCleaning() {
		bool IsEmpty = (
			wep.weaponstatus[ChamberSlot] == WJ_EMPTY &&
			wep.weaponstatus[MagSlot] < 0);
		bool PressedUnload = (
			owner.player.cmd.buttons&BT_UNLOAD &&
			!(owner.player.oldbuttons&BT_UNLOAD));
		bool HoldingUnload = (
			owner.player.cmd.buttons&BT_UNLOAD);

		if (!HoldingUnload) { CleanCycle = 0; }
		if (CleanCycle > 4) { return; }

		if (IsEmpty) {
			// Start cleaning
			if (PressedUnload) {
				owner.A_StartSound("weapons/pocket", CHAN_AUTO);
				owner.A_Log("Checking for grime...", true);
			}
			// Keep Cleaning
			else if (HoldingUnload && level.maptime%20 == 0) {
				// Success
				if (weightedroll(int(JamThresh*0.5)) < wep.weaponstatus[JamSlot]) {
					owner.A_Log("Cleaned out the chamber a bit.", true);
					owner.A_StartSound("weapons/pocket", CHAN_AUTO);
					wep.weaponstatus[JamSlot] = int(wep.weaponstatus[JamSlot] * 0.75);
					UaS.LogDebug(DBG_Jamming, string.format("Jam threshold "..wep.weaponstatus[JamSlot].."/"..JamThresh.." after cleaning"));
					CleanCycle = 10;
				}
				// Fail
				else {
					owner.A_StartSound("weapons/pocket", CHAN_AUTO, volume:0.75, pitch:0.75);
					CleanCycle++;
					if (CleanCycle > 4) { owner.A_Log("Couldn't clean much.", true); }
				}
			}
		}
	}

	int weightedroll(int thresh) {
		int r = random[uas_jm](0, thresh);
		r += random[uas_jm](0, thresh);
		r += random[uas_jm](0, thresh);
		r  = thresh - (2 * abs(r/3 - (thresh / 2)));
		return r;
	}
}
