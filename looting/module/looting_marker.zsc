class UaS_SearchedCorpseMarker : Inventory {
	array<string> Loot;
	int searchedAmount;
	bool foundSomething;
	string lastMessage;
	bool fullysearched;

	void InitLoot() {
		UaS_LootList ll = UaS_LootList.get();
		int lootslots = random(5,10);
		double chance = UaS_LootingFactor;
		for (int i = 0; i < lootslots; i++) {
			if (UaS.RandomChance(chance)) {
				string item = ll.GetLootItem(owner);
				Loot.Push(item);
			}
			else { Loot.Push(""); }
		}
		if(UaS_Debug & DBG_Looting) {
			string dbgout = "Init loot for "..owner.getclassname().." : ";
			for(int i=0; i<Loot.Size(); i++) {
				dbgout = dbgout..Loot[i]..", ";
			}
			console.printf(dbgout);
		}
	}

	void ReturnLoot() {
		for(inventory item=self.inv;item!=null;item=item.inv){
			if (item is 'HDPickup') {
				console.printf(item.getclassname()); //replace with whatever you actually want to do instead
			}
		}
	}
	/*void ReturnLoot() {
		int check = (
			random[loot](0,100) +
			random[loot](0,100) +
			random[loot](0,100)) / 3;

		if (check < searchedAmount) {
			// On successful search check, see if there's actually loot in this pocket
			if(Loot[0] == "") {
				// Spawn some debris for an empty pocket
				if(UaS_Debug & DBG_Looting) { console.printf("Empty pocket..."); }
				SpawnLootDebris();
				SearchedAmount = 0;
				Loot.Delete(0);
			}
			else {
				// Actually spawn the loot and reset
				if(UaS_Debug & DBG_Looting) { console.printf("Loot spawn: "..Loot[0]); }
				UaS.SpawnStuff(Loot[0], 1, owner.pos, true);
				Loot.Delete(0);
				SearchedAmount = 0;
				foundSomething = true;
			}
		}
		else {
			// Otherwise just increment progress
			searchedAmount += random[loot](10,75);
			if(UaS_Debug & DBG_Looting) { console.printf("Check "..check.." -- Progress "..searchedAmount); }
		}
		// Mark complete if no more loot entries
		if (Loot.Size() <= 0) { fullysearched = true; }
	}*/

	void SpawnLootDebris() {
		for (int i = 0; i < 5; i++) {
			owner.A_SpawnItemEx("TinyWallChunk",
				zofs: 4,
				xvel: frandom[loot](4, 7),
				yvel: frandom[loot](-2, 2),
				zvel: frandom[loot](-2, 1),
				flags: SXF_NOCHECKPOSITION,
				failchance: 64);
		}
	}
}
