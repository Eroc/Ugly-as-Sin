class UaS_SearchedCorpseMarker : Inventory {
	array<string> Loot;
	int searchedAmount;
	bool foundSomething;
	string lastMessage;
	bool fullysearched;

	void InitLoot() {
		UaS_LootList ll = UaS_LootList.get();
		int lootslots = random(5,10);
		double chance = UaS_LootingFactor;
		for (int i = 0; i < lootslots; i++) {
			if (UaS.RandomChance(chance)) {
				string item = ll.GetLootItem(owner);
				Loot.Push(item);
			}
			else { Loot.Push(""); }
		}
		string dbgout = "Init loot for "..owner.getclassname().." : ";
		for(int i=0; i<Loot.Size(); i++) {
			dbgout = dbgout..Loot[i]..", ";
		}
		UaS.LogDebug(DBG_Looting, string.format(dbgout));
	}

	void ReturnLoot() {
		int check = (
			random[loot](0,100) +
			random[loot](0,100) +
			random[loot](0,100)) / 3;

		if (check < searchedAmount) {
			SpawnLootDebris();
			HDPickup item = HDPickup(owner.FindInventory("HDPickup", true));
			if (item) {
				owner.DropInventory(item); // this works!
				UaS.LogDebug(DBG_Looting, string.format("Loot spawn: "..item.GetClassName()));
				SearchedAmount = 0;
				foundSomething = true;
			}
			else {
				fullysearched = true;
			}
		}
		else {
			// Otherwise just increment progress
			searchedAmount += random[loot](5,10);
			UaS.LogDebug(DBG_Looting, string.format("Check "..check.." -- Progress "..searchedAmount));
		}
	}

	void SpawnLootDebris() {
		for (int i = 0; i < 5; i++) {
			owner.A_SpawnItemEx("TinyWallChunk",
				zofs: 4,
				xvel: frandom[loot](4, 7),
				yvel: frandom[loot](-2, 2),
				zvel: frandom[loot](-2, 1),
				flags: SXF_NOCHECKPOSITION,
				failchance: 64);
		}
	}
}
