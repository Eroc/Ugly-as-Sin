class UaS_SearchedCorpseMarker : Inventory {
	int searchedAmount;
	// bool foundSomething;
	string lastMessage;
	bool fullysearched;
	int foundItems;

	// Drop or spawn loot items from the monster being searched
	void ReturnLoot() {
		int check = (
			random[loot](0,100) +
			random[loot](0,100) +
			random[loot](0,100)) / 3;

		if (check < searchedAmount) {
			UaS.LogDebug(DBG_Looting, string.format(
				"Check %g\tProgress %g\tEffective Lootfactor %g",
				check,searchedAmount,UaS_LootingFactor/(1+foundItems)));
			SpawnLootDebris();
			searchedAmount = 0;
			if (TryFindScarcityLoot()) { return; }
			else if (frandom[loot](0,1+foundItems) < UaS_LootingFactor) {
				UaS_LootList ll = UaS_LootList.get();
				string backupitem = ll.GetLootItem(owner);
				if(TryGiveDroppableLoot(backupitem)) { return; }
				if(TrySpawnLoot(backupitem)) { return; }
				foundItems++;
				return;
			}
			UaS.LogDebug(DBG_Looting, string.format("No more loot"));
			fullysearched = true;
			return;
		}
		// Otherwise just increment progress
		searchedAmount += random[loot](5,10);
	}

	// For dropping loot which was placed by the Scarcity module
	bool TryFindScarcityLoot() {
		HDPickup item = HDPickup(owner.FindInventory("HDPickup", true));
		bool validitem = (item
			&& item.bulk>0
			&& !item.bNotInPockets
			&& !item.bNeverShowInPickupManager);
		if (validitem) {
			let wasdropped = owner.DropInventory(item);
			if (wasdropped) {
				UaS.LogDebug(DBG_Looting, string.format("TryFindScarcityLoot() dropped: "..wasdropped.GetClassName()));
				foundItems++;
				return true;
			}
			UaS.LogDebug(DBG_Looting, string.format("TryFindScarcityLoot() failed"));
			return false;
		}
		return false;		
	}

	// For dropping regular Inventory items that can be held by monsters
	// This is mostly for consistency
	bool TryGiveDroppableLoot(string item) {
		if (item~=="") { return false; }
		if (!owner.GiveInventory(item, 1)) { return false; }
		let todrop = owner.FindInventory(item);
		let wasdropped = owner.DropInventory(todrop);
		if (wasdropped) {
			UaS.LogDebug(DBG_Looting, string.format("TryGiveDroppableLoot() dropped "..wasdropped.GetClassName()));
			foundItems++;
			return true;
		}
		UaS.LogDebug(DBG_Looting, string.format("TryGiveDroppableLoot() failed"));
		return false;
	}

	// For any other non-Inventory loot items
	bool TrySpawnLoot(string item) {
		if (item~=="") { return false; }
		Actor spawned = UaS.SpawnStuff(item, 1, owner.pos, true);
		if (spawned) {
			UaS.LogDebug(DBG_Looting, string.format("TrySpawnLoot() dropped "..spawned.GetClassName()));
			foundItems++;
			return true;
		}
		UaS.LogDebug(DBG_Looting, string.format("TrySpawnLoot() failed"));
		return false;
	}

	void SpawnLootDebris() {
		for (int i = 0; i < 5; i++) {
			owner.A_SpawnItemEx("TinyWallChunk",
				zofs: 4,
				xvel: frandom[loot](4, 7),
				yvel: frandom[loot](-2, 2),
				zvel: frandom[loot](-2, 1),
				flags: SXF_NOCHECKPOSITION,
				failchance: 64);
		}
	}
}
