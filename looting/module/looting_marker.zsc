class UaS_SearchedCorpseMarker : Inventory {
	int searchedAmount;
	bool foundSomething;
	string lastMessage;
	bool fullysearched;

	void ReturnLoot() {
		int check = (
			random[loot](0,100) +
			random[loot](0,100) +
			random[loot](0,100)) / 3;

		if (check < searchedAmount) {
			SpawnLootDebris();
			HDPickup item = HDPickup(owner.FindInventory("HDPickup", true));
			bool validitem = (item
				&& item.bulk>0
				&& !item.bNotInPockets
				&& !item.bNeverShowInPickupManager);
			if (validitem) {
				owner.DropInventory(item); // this works!
				UaS.LogDebug(DBG_Looting, string.format("Loot spawn: "..item.GetClassName()));
				SearchedAmount = 0;
				foundSomething = true;
			}
			else {
				if (frandom[loot](0,1) < UaS_LootingFactor) {
					UaS_LootList ll = UaS_LootList.get();
					string backupitem = ll.GetLootItem(owner);
					if (backupitem != "") {
						UaS.SpawnStuff(backupitem, 1, owner.pos, true);
						UaS.LogDebug(DBG_Looting, string.format("Loot spawn fallback: "..backupitem));
						foundSomething = true;
					}
					else { UaS.LogDebug(DBG_Looting, string.format("no fallback item")); }
				}
				fullysearched = true;
			}
		}
		else {
			// Otherwise just increment progress
			searchedAmount += random[loot](5,10);
			UaS.LogDebug(DBG_Looting, string.format("Check "..check.." -- Progress "..searchedAmount));
		}
	}

	void SpawnLootDebris() {
		for (int i = 0; i < 5; i++) {
			owner.A_SpawnItemEx("TinyWallChunk",
				zofs: 4,
				xvel: frandom[loot](4, 7),
				yvel: frandom[loot](-2, 2),
				zvel: frandom[loot](-2, 1),
				flags: SXF_NOCHECKPOSITION,
				failchance: 64);
		}
	}
}
