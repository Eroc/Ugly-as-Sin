extend class UaS_Scarcity_Handler {
	//Remover function which counts all of an item then only removes a set percentage
	void ExactScarcity(name checkClass, double targetPercent) {

		// Build instance array for this class
		array<HDPickup> thingArray;
		HDPickup nextThing;
		let thingCounter = ThinkerIterator.Create(CheckClass);
		while(nextThing = HDPickup(thingCounter.Next(true))) {
			if (nextThing.owner) continue;
			thingArray.Push(nextThing);
		}

		// Calculate how many to keep
		int originalcount = thingArray.Size();
		if(originalcount <= 0) { return; } // sanity?
		int targetAmount = int(thingArray.Size() * targetPercent);

		// Loop over each instance until we hit the target amount
		string dbgMsg = "Scarcity processing for "..CheckClass.." x"..originalcount;
		while(thingArray.Size() > targetAmount) {
			// pick a random object from array
			int index = random(0, thingArray.Size()-1);
			inventory mo = inventory(thingArray[index]);
			if(mo.owner) {
				thingArray.Delete(index);
				continue;
			}

			//Find nearby mobs to the object
			let mobFinder = BlockThingsIterator.Create(mo, 256);
			array<HDHumanoid> mobArray;
			// build a list of mobs
			while(mobFinder.Next()) {
				if(mobFinder.thing is 'HDHumanoid') {
					mobArray.push(HDHumanoid(mobFinder.thing));
				}
			}

			// Decide based on if mobs were found
			bool pickedUp = false;
			HDMobBase mb;
			while (mobArray.Size()>0 && !pickedUp) {
				int mobIndex = random(0, mobArray.Size()-1); // pick a random mob from the array
				mb = mobArray[mobIndex];
				if (mb && mo) {
					//Move item to mob's array
					if (mb.checkmove(mo.pos.xy,PCM_DROPOFF) && mb.FindInventory("HDPickup",true) == null) {
						vector3 oldmopos = mo.pos;
						mo.setorigin(mb.pos,false);
						pickedUp = mo.CallTryPickup(mb);
						if (pickedUp) {
							dbgMsg = dbgMsg.."\n\t• Added to "..mb.getclassname().."'s inventory";
						}
						else {
							mo.setorigin(oldmopos,false);
						}
					}
				}
				mobArray.delete(mobIndex);
			}

			if (!pickedUp) {
				dbgMsg = dbgMsg.."\n\t• Modified or removed "..mo.getclassname();
				DoReplacement(mo);
				thingArray[index].destroy();
			}
			thingArray.Delete(index);
		}

		//UaS.LogDebug(DBG_Scarcity, string.format(checkClass.." %i, %i, %i", originalcount, ThingArray.Size(), targetAmount));
		UaS.LogDebug(DBG_Scarcity, string.format(dbgMsg));
		thingArray.Clear();
	}
}
