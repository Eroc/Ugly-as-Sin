class UaS_Marker : HDPickup abstract {
	bool Activated, UsedLast, UsedUp;
	meta string UseSound;
	meta string LoopSound;
	property UseSound : UseSound;
	property LoopSound : LoopSound;
	int brightness, age;

	Default {
		Height 1;
		HDPickup.Bulk 2;
		-HDPickup.DropTranslation;
		+HDPickup.FitsInBackpack;
		+FLATSPRITE;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
		+INVENTORY.IGNORESKILL;
	}

	override void DoEffect() {
		super.DoEffect();
	}

	override void Tick() {
		super.Tick();
		if (IsFrozen()) { return; }
		if (owner) { return; }
		HandleAttachedLight();
		bFLATSPRITE = (pos.z-floorz<=1);
		A_SetRoll(roll+vel.length(),SPF_INTERPOLATE);
		A_SetAngle(angle+vel.length(),SPF_INTERPOLATE);
	}

	override bool Use(bool pickup) {
		A_StartSound(UseSound, CHAN_AUTO);
		Activated = true;
		owner.DropInventory(self);
		return false;
	}

	override Inventory CreateTossable(int amt) {
		if (Activated) {
			UaS_Marker dropped = UaS_Marker(super.CreateTossable(amt));
			dropped.Activated = true;
			if (owner) { Activated = false; }
			return dropped;
		}
		return super.CreateTossable(amt);
	}

	override void OnDrop (actor Dropper) {
		if (Activated) {
			bFitsInBackpack = false;
			let pd = HDPlayerPawn(Dropper);
			if (pd && pd.player.cmd.buttons&BT_ZOOM) {
				self.Vel3DFromAngle(10,
					pd.angle,
					pd.pitch-20
				);
			}
			else { AttachHandler(Dropper); }
		}
	}

	override bool OnGrab (actor Grabber){
		if(Activated) {
			AttachHandler(Grabber);
			return false;
		}
		return super.OnGrab(Grabber);
	}

	void AttachHandler(actor other) {
		other.GiveInventory("UaS_MarkerHandler",1);
		UaS_MarkerHandler handler = UaS_MarkerHandler(other.FindInventory("UaS_MarkerHandler"));
		handler.AttachNewMarker(self);
	}

	virtual void HandleAttachedLight() {}
}
