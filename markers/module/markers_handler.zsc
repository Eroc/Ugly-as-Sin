class UaS_MarkerHandler : Inventory {
	UaS_Marker AttachedMarker;
	double offsetangle;
	default {
		Inventory.MaxAmount 1;
	}

	override void DoEffect() {
		super.DoEffect();
		HandleAttachedMarker();
	}

	void HandleAttachedMarker() {
		if (!AttachedMarker) return;
		if (owner.pitch<80) { offsetangle=owner.angle+100; }
		double distcheck = owner.Distance2D(AttachedMarker);
		if (distcheck >= 128) {
			// console.printf("teleported marker");
			AttachedMarker.SetOrigin(owner.pos,false);
			AttachedMarker.vel=owner.vel;
			return;
		}
		else if (distcheck > owner.radius*2) {
			// console.printf("detatched marker for distance");
			AttachedMarker = null;
			return;
		}
		vector3 mpos = owner.Vec3Angle(
			owner.radius*0.5,
			offsetangle,
			owner.height*0.5);
		AttachedMarker.vel += UaS.DampedVec3Spring(
			AttachedMarker.pos,
			mpos,
			AttachedMarker.vel,
			0.25, 0.5);
	}

	void AttachNewMarker(UaS_Marker newmrkr) {
		if (!newmrkr) { return; }
		if (newmrkr is "Uas_Flare") { return; }
		if (AttachedMarker) {
			bool ShouldDetach = (
				newmrkr == AttachedMarker
				&& abs(deltaangle(owner.angle, owner.angleto(AttachedMarker)))<10
				&& owner.pitch>=80
			);
			if (ShouldDetach) { AttachedMarker = null; }
		}
		else { AttachedMarker = newmrkr; }
	}
}
